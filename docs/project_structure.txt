--- Folder Structure ---
[app]
    ├── [const]
        └── yourDetails.ts
    ├── layout.tsx
    ├── page.tsx
    ├── [ui]
        └── global.css
    └── [utils]
        └── parseIneligibility.ts
next.config.js
package.json
postcss.config.js
prettier.config.js
tailwind.config.ts
tsconfig.json

--- File Contents ---

--- File: app/const/yourDetails.ts ---
// Replace this with your contract address
export const myEditionDropContractAddress: string =
  "0x889d38F555d900d934230E3E97e1A271cDf2Def0";

// Replace this with your token id
export const tokenId: string = "0";


--- File: app/layout.tsx ---
import { Metadata } from "next";
import "@/app/ui/global.css";
import { ChainId, ThirdwebProvider } from "@thirdweb-dev/react";
import { Sepolia } from "@thirdweb-dev/chains";

export const metadata: Metadata = {
  title: {
    template: "%s | GweiToken Presale Pass",
    default: "GweiToken Presale Pass",
  },
  description:
    "Exclusive GweiToken Presale Pass: Limited to 3,000 passes. Enjoy early access to GweiTokens and platform perks. Secure, transparent integration with Arbitrum blockchain.",
  metadataBase: new URL("https://next-learn-dashboard.vercel.sh"),
};

const activeChain = Sepolia;

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <ThirdwebProvider
        activeChain={activeChain}
        clientId={process.env.NEXT_PUBLIC_CLIENT_ID}
      >
        <body>{children}</body>
      </ThirdwebProvider>
    </html>
  );
}


--- File: app/page.tsx ---
"use client";

import {
  useActiveClaimConditionForWallet,
  useAddress,
  useClaimConditions,
  useClaimerProofs,
  useClaimIneligibilityReasons,
  useContract,
  useContractMetadata,
  useTotalCirculatingSupply,
  Web3Button,
} from "@thirdweb-dev/react";
import { BigNumber, utils } from "ethers";
import { useMemo, useState } from "react";
import { parseIneligibility } from "./utils/parseIneligibility";
import { myEditionDropContractAddress, tokenId } from "./const/yourDetails";
import Image from "next/image";
import gweiPass from "/Gwei_Presale_Pass.png";

export default function Page() {
  const address = useAddress();
  const [quantity, setQuantity] = useState(1);
  const { contract: editionDrop } = useContract(myEditionDropContractAddress);
  const { data: contractMetadata } = useContractMetadata(editionDrop);

  const claimConditions = useClaimConditions(editionDrop);
  const activeClaimCondition = useActiveClaimConditionForWallet(
    editionDrop,
    address,
    tokenId,
  );
  const claimerProofs = useClaimerProofs(editionDrop, address || "", tokenId);
  const claimIneligibilityReasons = useClaimIneligibilityReasons(
    editionDrop,
    {
      quantity,
      walletAddress: address || "",
    },
    tokenId,
  );

  const claimedSupply = useTotalCirculatingSupply(editionDrop, tokenId);

  const totalAvailableSupply = useMemo(() => {
    try {
      return BigNumber.from(activeClaimCondition.data?.availableSupply || 0);
    } catch {
      return BigNumber.from(1_000_000);
    }
  }, [activeClaimCondition.data?.availableSupply]);

  const numberClaimed = useMemo(() => {
    return BigNumber.from(claimedSupply.data || 0).toString();
  }, [claimedSupply]);

  const numberTotal = useMemo(() => {
    const n = totalAvailableSupply.add(BigNumber.from(claimedSupply.data || 0));
    if (n.gte(1_000_000)) {
      return "";
    }
    return n.toString();
  }, [totalAvailableSupply, claimedSupply]);

  const priceToMint = useMemo(() => {
    const bnPrice = BigNumber.from(
      activeClaimCondition.data?.currencyMetadata.value || 0,
    );
    return `${utils.formatUnits(
      bnPrice.mul(quantity).toString(),
      activeClaimCondition.data?.currencyMetadata.decimals || 18,
    )} ${activeClaimCondition.data?.currencyMetadata.symbol}`;
  }, [
    activeClaimCondition.data?.currencyMetadata.decimals,
    activeClaimCondition.data?.currencyMetadata.symbol,
    activeClaimCondition.data?.currencyMetadata.value,
    quantity,
  ]);

  const maxClaimable = useMemo(() => {
    let bnMaxClaimable;
    try {
      bnMaxClaimable = BigNumber.from(
        activeClaimCondition.data?.maxClaimableSupply || 0,
      );
    } catch (e) {
      bnMaxClaimable = BigNumber.from(1_000_000);
    }

    let perTransactionClaimable;
    try {
      perTransactionClaimable = BigNumber.from(
        activeClaimCondition.data?.maxClaimablePerWallet || 0,
      );
    } catch (e) {
      perTransactionClaimable = BigNumber.from(1_000_000);
    }

    if (perTransactionClaimable.lte(bnMaxClaimable)) {
      bnMaxClaimable = perTransactionClaimable;
    }

    const snapshotClaimable = claimerProofs.data?.maxClaimable;

    if (snapshotClaimable) {
      if (snapshotClaimable === "0") {
        // allowed unlimited for the snapshot
        bnMaxClaimable = BigNumber.from(1_000_000);
      } else {
        try {
          bnMaxClaimable = BigNumber.from(snapshotClaimable);
        } catch (e) {
          // fall back to default case
        }
      }
    }

    let max;
    if (totalAvailableSupply.lt(bnMaxClaimable)) {
      max = totalAvailableSupply;
    } else {
      max = bnMaxClaimable;
    }

    if (max.gte(1_000_000)) {
      return 1_000_000;
    }
    return max.toNumber();
  }, [
    claimerProofs.data?.maxClaimable,
    totalAvailableSupply,
    activeClaimCondition.data?.maxClaimableSupply,
    activeClaimCondition.data?.maxClaimablePerWallet,
  ]);

  const isSoldOut = useMemo(() => {
    try {
      return (
        (activeClaimCondition.isSuccess &&
          BigNumber.from(activeClaimCondition.data?.availableSupply || 0).lte(
            0,
          )) ||
        numberClaimed === numberTotal
      );
    } catch (e) {
      return false;
    }
  }, [
    activeClaimCondition.data?.availableSupply,
    activeClaimCondition.isSuccess,
    numberClaimed,
    numberTotal,
  ]);

  const canClaim = useMemo(() => {
    return (
      activeClaimCondition.isSuccess &&
      claimIneligibilityReasons.isSuccess &&
      claimIneligibilityReasons.data?.length === 0 &&
      !isSoldOut
    );
  }, [
    activeClaimCondition.isSuccess,
    claimIneligibilityReasons.data?.length,
    claimIneligibilityReasons.isSuccess,
    isSoldOut,
  ]);

  const isLoading = useMemo(() => {
    return (
      activeClaimCondition.isLoading || claimedSupply.isLoading || !editionDrop
    );
  }, [activeClaimCondition.isLoading, editionDrop, claimedSupply.isLoading]);

  const buttonLoading = useMemo(
    () => isLoading || claimIneligibilityReasons.isLoading,
    [claimIneligibilityReasons.isLoading, isLoading],
  );
  const buttonText = useMemo(() => {
    if (isSoldOut) {
      return "Sold Out";
    }

    if (canClaim) {
      const pricePerToken = BigNumber.from(
        activeClaimCondition.data?.currencyMetadata.value || 0,
      );
      if (pricePerToken.eq(0)) {
        return "Mint (Free)";
      }
      return `Mint (${priceToMint})`;
    }
    if (claimIneligibilityReasons.data?.length) {
      return parseIneligibility(claimIneligibilityReasons.data, quantity);
    }
    if (buttonLoading) {
      return "Checking eligibility...";
    }

    return "Claiming not available";
  }, [
    isSoldOut,
    canClaim,
    claimIneligibilityReasons.data,
    buttonLoading,
    activeClaimCondition.data?.currencyMetadata.value,
    priceToMint,
    quantity,
  ]);
  return (
    <main className="flex min-h-screen flex-col p-6">
      <div className="flex w-full flex-col items-center justify-center">
        <div className="mb-16 flex w-full flex-col items-center justify-center gap-12 lg:flex-row lg:items-start lg:gap-[10%]">
          {isLoading ? (
            <div className="flex w-full animate-pulse flex-col items-center justify-center gap-8 lg:flex-row lg:items-start lg:gap-[10%]">
              {/* <div className="flex w-full flex-col items-start justify-center space-y-8 lg:w-[45%]">
              <div className="h-10 w-56 rounded bg-slate-700"></div>
              <div className="w-full space-y-6 py-1">
                <div className="h-3 rounded bg-slate-700"></div>
                <div className="space-y-3">
                  <div className="grid w-full grid-cols-3 gap-4">
                    <div className="col-span-2 h-3 rounded bg-slate-700"></div>
                    <div className="col-span-1 h-3 rounded bg-slate-700"></div>
                  </div>
                  <div className="h-3 rounded bg-slate-700"></div>
                </div>
                <div className="h-3 rounded bg-slate-700"></div>
                <div className="h-3 rounded bg-slate-700"></div>
                <div className="space-y-3">
                  <div className="grid w-full grid-cols-3 gap-4">
                    <div className="col-span-2 h-3 rounded bg-slate-700"></div>
                    <div className="col-span-1 h-3 rounded bg-slate-700"></div>
                  </div>
                  <div className="h-3 rounded bg-slate-700"></div>
                  <div className="h-3 rounded bg-slate-700"></div>
                  <div className="h-3 rounded bg-slate-700"></div>
                </div>
              </div>
            </div> */}
              <div className="flex w-fit flex-col space-y-12">
                <div className="h-[24rem] w-[24rem] rounded-xl bg-slate-700"></div>
                <div className="grid w-full grid-cols-3 gap-4">
                  <div className="col-span-2 h-3 rounded bg-slate-700"></div>
                  <div className="col-span-1 h-3 rounded bg-slate-700"></div>
                  <div className="col-span-2 h-3 rounded bg-slate-700"></div>
                  <div className="col-span-1 h-3 rounded bg-slate-700"></div>
                </div>
                <div className="h-11 w-full rounded-xl bg-slate-700"></div>
              </div>
            </div>
          ) : (
            <>
              <div className="flex flex-col gap-8">
                {/* Image Preview of NFTs */}
                <div className="flex w-fit items-center justify-center rounded-xl border border-[#525050] p-2">
                  <Image
                    className="rounded-xl"
                    src={contractMetadata?.image}
                    alt={`${contractMetadata?.name || gweiPass} preview image`}
                    width={384}
                    height={384}
                  />
                </div>

                <div className="flex w-full flex-col gap-6">
                  {/* Amount claimed so far */}
                  <div className="flex w-full items-start justify-between gap-[10%]">
                    <div>
                      <p>Total Minted</p>
                    </div>
                    <div className="text-dark">
                      {claimedSupply ? (
                        <p>
                          <b>{numberClaimed}</b>
                          {" / "}
                          {numberTotal || "∞"}
                        </p>
                      ) : (
                        // Show loading state if we're still loading the supply
                        <p>Loading...</p>
                      )}
                    </div>
                  </div>

                  {claimConditions.data?.length === 0 ||
                  claimConditions.data?.every(
                    (cc) => cc.maxClaimableSupply === "0",
                  ) ? (
                    <div>
                      <h2>
                        This drop is not ready to be minted yet. (No claim
                        condition set)
                      </h2>
                    </div>
                  ) : (
                    <>
                      <div className="flex w-full flex-row items-center justify-between gap-8 lg:w-auto">
                        <p>Mint:</p>
                        <div className="flex items-center justify-start gap-12 text-black">
                          <button
                            className={`border-dark flex h-11 w-11 cursor-pointer items-center justify-center rounded-full border-2 text-3xl disabled:opacity-25`}
                            onClick={() => setQuantity(quantity - 1)}
                            disabled={quantity <= 1}
                          >
                            -
                          </button>

                          <h4>{quantity}</h4>

                          <button
                            className={`border-dark flex h-11 w-11 cursor-pointer items-center justify-center rounded-full border-2 text-3xl disabled:opacity-25`}
                            onClick={() => setQuantity(quantity + 1)}
                            disabled={quantity >= maxClaimable}
                          >
                            +
                          </button>
                        </div>
                      </div>
                      <div className="mt-2 w-full ">
                        {isSoldOut ? (
                          <div>
                            <h2>Sold Out</h2>
                          </div>
                        ) : (
                          <Web3Button
                            className="flex !w-full"
                            theme="light"
                            contractAddress={editionDrop?.getAddress() || ""}
                            action={(cntr) =>
                              cntr.erc1155.claim(tokenId, quantity)
                            }
                            isDisabled={!canClaim || buttonLoading}
                            onError={(err) => {
                              console.error(err);
                              alert("Error claiming NFTs");
                            }}
                            onSuccess={() => {
                              setQuantity(1);
                              alert("Successfully claimed NFTs");
                            }}
                          >
                            {buttonLoading ? "Loading..." : buttonText}
                          </Web3Button>
                        )}
                      </div>
                    </>
                  )}
                </div>
              </div>
            </>
          )}
        </div>
      </div>
    </main>
  );
}


--- File: app/ui/global.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;



--- File: app/utils/parseIneligibility.ts ---
import { ClaimEligibility } from "@thirdweb-dev/sdk";

export function parseIneligibility(
  reasons: ClaimEligibility[],
  quantity = 0
): string {
  if (!reasons.length) {
    return "";
  }

  const reason = reasons[0];

  if (
    reason === ClaimEligibility.Unknown ||
    reason === ClaimEligibility.NoActiveClaimPhase ||
    reason === ClaimEligibility.NoClaimConditionSet
  ) {
    return "This drop is not ready to be minted.";
  } else if (reason === ClaimEligibility.NotEnoughTokens) {
    return "You don't have enough currency to mint.";
  } else if (reason === ClaimEligibility.AddressNotAllowed) {
    if (quantity > 1) {
      return `You are not eligible to mint ${quantity} tokens.`;
    }

    return "You are not eligible to mint at this time.";
  }

  return reason;
}


--- File: next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
    images: {
      domains: [
        "bafybeica5wmolr6lx75xp4ia4t5kta4itvr7tqshl7pa45iv5aubaypfxe.ipfs.cf-ipfs.com",
      ],
    },
};

module.exports = nextConfig;


--- File: package.json ---
{
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "prettier": "prettier --write --ignore-unknown .",
    "prettier:check": "prettier --check --ignore-unknown .",
    "start": "next start"
  },
  "dependencies": {
    "@thirdweb-dev/react": "^3.16.5",
    "@thirdweb-dev/sdk": "^3",
    "ethers": "^5.6.8",
    "@heroicons/react": "^2.0.18",
    "@types/node": "20.5.7",
    "autoprefixer": "10.4.15",
    "bcrypt": "^5.1.1",
    "clsx": "^2.0.0",
    "next": "^14.0.2",
    "postcss": "8.4.31",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwindcss": "3.3.3",
    "typescript": "5.2.2"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.1",
    "@types/react": "18.2.21",
    "@types/react-dom": "18.2.14",
    "dotenv": "^16.3.1",
    "eslint": "^8.52.0",
    "eslint-config-next": "^14.0.0",
    "eslint-config-prettier": "9.0.0",
    "prettier": "^3.0.3",
    "prettier-plugin-tailwindcss": "0.5.4"
  },
  "engines": {
    "node": ">=18.17.0"
  }
}


--- File: postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


--- File: prettier.config.js ---
module.exports = {
  plugins: ["prettier-plugin-tailwindcss"],
};


--- File: tailwind.config.ts ---
import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      gridTemplateColumns: {
        '13': 'repeat(13, minmax(0, 1fr))',
      },
      colors: {
        blue: {
          400: '#2589FE',
          500: '#0070F3',
          600: '#2F6FEB',
        },
      },
    },
    keyframes: {
      shimmer: {
        '100%': {
          transform: 'translateX(100%)',
        },
      },
    },
  },
};
export default config;


--- File: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

